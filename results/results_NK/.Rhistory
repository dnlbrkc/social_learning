ylab("Average performance")+
theme(strip.background = element_blank())+
scale_linetype_manual(values=c(3,2,1,1,9,2))+
scale_size_manual(values=c(0.5,0.7,0.5,1,0.7,0.7))+
scale_color_manual(values=c("#F8766D","#F8766D","#00BFC4","#00BFC4","#000000",'#999999'))+
theme(legend.position="bottom",
legend.direction="horizontal",
legend.title=element_blank(),
legend.key.width=unit(0.6,"cm"),
plot.title=element_text(size=12,face="plain")) + ylim(0,1)+
ggtitle("Simple environment (N=15, K=0)")
plot1
melt_1 <- melt(strats1)
colnames(melt_1) <- colnames(melt_2) <- c("x","Strategy","value")
plot1 <- ggplot(melt_1,aes(x=x,y=value,color=Strategy,linetype=Strategy,size=Strategy))+
geom_line()+
xlab("Time")+
ylab("Average performance")+
theme(strip.background = element_blank())+
scale_linetype_manual(values=c(3,2,1,1,9,2))+
scale_size_manual(values=c(0.5,0.7,0.5,1,0.7,0.7))+
scale_color_manual(values=c("#F8766D","#F8766D","#00BFC4","#00BFC4","#000000",'#999999'))+
theme(legend.position="bottom",
legend.direction="horizontal",
legend.title=element_blank(),
legend.key.width=unit(0.6,"cm"),
plot.title=element_text(size=12,face="plain")) + ylim(0,1)+
ggtitle("Simple environment (N=15, K=0)")
plot1
ggplot(melt_1,aes(x=x,y=value,color=Strategy,linetype=Strategy,size=Strategy))
colnames(melt_1) <-c("x","Strategy","value")
ggplot(melt_1,aes(x=x,y=value,color=Strategy,linetype=Strategy,size=Strategy))+
geom_line()+
xlab("Time")+
ylab("Average performance")+
theme(strip.background = element_blank())+
scale_linetype_manual(values=c(3,2,1,1,9,2))+
scale_size_manual(values=c(0.5,0.7,0.5,1,0.7,0.7))+
scale_color_manual(values=c("#F8766D","#F8766D","#00BFC4","#00BFC4","#000000",'#999999'))+
theme(legend.position="bottom",
legend.direction="horizontal",
legend.title=element_blank(),
legend.key.width=unit(0.6,"cm"),
plot.title=element_text(size=12,face="plain")) + ylim(0,1)+
ggtitle("Simple environment (N=15, K=0)")
rm(list=ls())
setwd("~/Desktop/moderate")
data <- list.files(pattern="Rdata")
ls <- matrix(0,ncol=6,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]]
}
strats1 <- ls/length(data)
strats1
rm(list=ls())
library(gtools)
library(fGarch)
networks <- c("fully-connected.Rdata")
setwd("~/Desktop/social_learning/")
source("landscapes/generate_NK.R")
load("landscapes/bin_neighbors.Rdata")
n.strat=6 #NO. STRATEGIES
N=15; K=7 #NK PARAMETERS
n.agents=100 #NO. AGENTS
tsteps=200 #NO. TIME STEPS
#REPLICATION ID
r <- as.integer( commandArgs(TRUE)[1])
dig <- 1
#STORE RESULTS
diversity<-matrix(NA,ncol=6,nrow=tsteps)
perf.time<-matrix(NA,ncol=6,nrow=tsteps)
#GENERATE LANDSCAPE
LS<-permutations(2,N,v=c(0,1),repeats.allowed=TRUE)
LS<-as.data.frame(LS)
if (K==0){
depends <- as.vector(1:N)
values <- replicate(N,round(runif(2,0,1),1))
fitness <- values
} else {
depends <- rbind(1:N,replicate(N,sample(c(1:N),K,replace=F)))
combinations <- permutations(2,K+1,v=c(0,1),repeats.allowed=TRUE)
values <- replicate(N,round(runif(nrow(combinations),0,1),1))
fitness <- cbind(combinations,values)
}
landscape <- generate_landscape(N,K,LS,fitness,depends)
landscape[,N+1] <- (landscape[,N+1]/max(landscape[,N+1]))^8
landscape <- cbind(0:(nrow(landscape)-1),landscape[,N+1])
landscape1<-generate_landscape(N,K,LS,fitness,depends)
landscape1[,N+1]<-(landscape1[,N+1]/max(landscape1[,N+1]))^8
fitness.score<-vector()
values2<-values
values2[,sample(c(1:N),dig)]<-replicate(dig,round(runif(nrow(combinations),0,1),1))
fitness2<-cbind(combinations, values2)
landscape2<-generate_landscape(N,K,LS,fitness,depends)
landscape2[,N+1]<-(landscape2[,N+1]/max(landscape2[,N+1]))^8
values3<-values2
values3[,sample(c(1:N),dig)]<-replicate(dig,round(runif(nrow(combinations),0,1),1))
fitness3<-cbind(combinations, values3)
landscape3<-generate_landscape(N,K,LS,fitness,depends)
landscape3[,N+1]<-(landscape3[,N+1]/max(landscape3[,N+1]))^8
values4<-values3
values4[,sample(c(1:N),dig)]<-replicate(dig,round(runif(nrow(combinations),0,1),1))
fitness4<-cbind(combinations, values4)
landscape4<-generate_landscape(N,K,LS,fitness,depends)
landscape4[,N+1]<-(landscape4[,N+1]/max(landscape4[,N+1]))^8
values5<-values4
values5[,sample(c(1:N),dig)]<-replicate(dig,round(runif(nrow(combinations),0,1),1))
fitness5<-cbind(combinations, values5)
landscape5<-generate_landscape(N,K,LS,fitness,depends)
landscape5[,N+1]<-(landscape5[,N+1]/max(landscape5[,N+1]))^8
landscape1<-cbind(0:(nrow(landscape1)-1),landscape1[,N+1])
landscape2<-cbind(0:(nrow(landscape2)-1),landscape2[,N+1])
landscape3<-cbind(0:(nrow(landscape3)-1),landscape3[,N+1])
landscape4<-cbind(0:(nrow(landscape4)-1),landscape4[,N+1])
landscape5<-cbind(0:(nrow(landscape5)-1),landscape5[,N+1])
net <- networks
setwd("networks/")
load(net)
contacts <- network
#AVERAGE OVER 100 LANDSCAPES
total.perftime <- matrix(0,ncol=n.strat,nrow=tsteps)
total.diversity <- matrix(0,ncol=n.strat,nrow=tsteps)
reps = 1
#FOR EACH STRATEGY
for (s in c(1:6)){
#DETERMINE SAMPLE SIZE
if (s == 1 || s == 3) samplesize<-3 else if (s == 2 || s == 4) samplesize<-9 else samplesize<-1
landscape <- landscape1
agents<-list()
#ALLOCATE RANDOM STARTING POSITIONS
agents[[1]] <- landscape[sample(1:2^N,100,replace=F),]
#FOR EACH TIME STEP
for (i in 2:tsteps){
if(i==40){landscape<-landscape2
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else if (i==80){
landscape<-landscape3
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else if (i==120){
landscape<-landscape4
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else if (i==160){
landscape<-landscape5
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else{
agents[[i]]<-agents[[i-1]]
}
#CARRY OVER OPTION FROM PREVIOUS TIME STEP
agents[[i]] <- agents[[i-1]]
#SAMPLE 's' OTHER PEOPLE
#samples <- replicate(n.agents,sample(1:n.agents,samplesize,replace=F))
samples <- sapply(1:100, function(x) sample(contacts[contacts[,1]==x,2],samplesize))
if (s == 1 || s == 2 ){ #IMPLEMENT BEST MEMBER STRATEGY
ind.learn<-vector(length=n.agents)
agents2 <- agents[[i]]
for (j in 1:n.agents){
payoffs <- agents[[i]][samples[,j],2] #look up payoffs of samples
best<-which(payoffs==max(payoffs)) #select highest payoff
if(length(best)>1) best <- sample(best,1) #if there's a tie in highest payoff, sample randomly
agents2[j,] <- agents[[i]][samples[best,j],] #adopt choice of best member
if(agents2[j,2]<=agents[[i-1]][j,2]){ #if payoff worse or equal, learn individually
ind.learn[j] <- j
}
}
ind.learn<-ind.learn[ind.learn!=0]
#those who do not learn individually adopt the socially acquired option
no.learn <- setdiff(1:100,ind.learn)
if(length(no.learn)>0){
agents[[i]][no.learn,] <- agents2[no.learn,]
}
} else if (s == 3 || s == 4 ) { #IMPLEMENT CONFORMITY STRATEGY
ind.learn<-vector(length=n.agents)
agents2 <- agents[[i]]
for (j in 1:n.agents){
a<-agents[[i]][samples[,j],1]
b<-tabulate(a)
freq <- b[b==max(b)]
if(length(freq)>1 & length(freq)<samplesize){
CH<-sample(which(b==freq[1]),1)
} else if (length(freq)==samplesize) {
ind.learn[j]<-j #if all options equally frequent, learn individually
} else {
CH <- which(b==freq[1])
}
if(length(freq)!=samplesize){
agents2[j,1] <- CH
agents2[j,2] <- landscape[(CH+1),2]
}
if(agents2[j,2]<=agents[[i-1]][j,2]){
ind.learn[j]<-j
}
}
ind.learn<-ind.learn[ind.learn!=0]
#those who do not learn individually adopt the socially acquired option
no.learn <- setdiff(1:100,ind.learn)
if(length(no.learn)>0){
agents[[i]][no.learn,] <- agents2[no.learn,]
}
} else if (s==5) { #IMPLEMENT RANDOM COPYING
ind.learn<-vector(length=n.agents)
agents2 <- agents[[i]]
for (j in 1:n.agents) {
agents2[j,] <- agents[[i]][samples[j],]
}
ind.learn<-ind.learn[ind.learn!=0]
#those who do not learn individually adopt the socially acquired option
no.learn <- setdiff(1:100,ind.learn)
if(length(no.learn)>0){
agents[[i]][no.learn,] <- agents2[no.learn,]
}
} else { # NO SOCIAL LEARNING CONDITION
if(i==100){
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else if (i==80){
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2]} else if (i==120){
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else if (i==160)  {
agents[[i]]<-agents[[i-1]]
agents[[i]][,2]<-landscape[agents[[i]][,1]+1,2] } else {
agents[[i]]<-agents[[i-1]]
}
ind.learn<-1:100
}
#IMPLEMENT INDIVIDUAL LEARNING
if(length(ind.learn)>=1){
h=0
choose<-vector()
for (n in c(ind.learn)){
h=h+1
choose[h] <- sample(bin_neighbors[,agents[[i]][n,1]+1],1)
}
choose1 <- choose+1
pay<-sapply(1:length(choose1), function(x) landscape[choose1[x],2])
new<-cbind(choose,pay)
l=0
for (n in c(ind.learn)){
l=l+1
agents[[i]][n,] <- new[l,]
}
}
#COMPARE PAYOFFS AFTER LEARNING AND DECIDE WHETHER OR NOT TO SWITCH
switching <- ifelse(agents[[i-1]][,2] < agents[[i]][,2],1,0)*1:n.agents
not.switching <- setdiff(1:100,switching[switching!=0])
agents[[i]][not.switching,] <- agents[[i-1]][not.switching,]
}
perf.time[,s] <- sapply(1:tsteps, function(x) mean(agents[[x]][,2]))
diversity[,s] <- sapply(1:tsteps, function(x) nrow(unique(agents[[x]])))
}
perf.time
landscape1[,2]
landscape2[,2]
landscape3[,2]
landscape2[,2]
landscape1[,2] == landscape2[,,2]
landscape1[,2] == landscape2[,2]
values2<-values
values2
values2[,sample(c(1:N),dig)]
values2[,sample(c(1:N),dig)]<-replicate(dig,round(runif(nrow(combinations),0,1),1))
setwd("..")
rm(list=ls())
setwd("results/results_NK/")
data <- list.files(pattern="Resultslattice")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz1 <- ls/length(data)
data <- list.files(pattern="Resultsmax-max-betweenness")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz2 <- ls/length(data)
data <- list.files(pattern="Resultsmax-mean-betweenness")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz3 <- ls/length(data)
data <- list.files(pattern="Resultsmax-mean-clustering")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz4 <- ls/length(data)
data <- list.files(pattern="Resultsmax-var-constraint")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz5 <- ls/length(data)
data <- list.files(pattern="Resultsfully")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz6 <- ls/length(data)
data <- list.files(pattern="Resultsmax-max-closeness")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz7 <- ls/length(data)
data <- list.files(pattern="Resultsmin-max-closeness")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz8 <- ls/length(data)
data <- list.files(pattern="Resultsmin-mean-betweenness")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz9 <- ls/length(data)
data <- list.files(pattern="Resultsmin-mean-clustering")
ls <- matrix(0,ncol=2,nrow=200)
for (i in 1:length(data)){
load(data[i])
ls <- ls + res[[1]][,c(1,3)]
}
pz10 <- ls/length(data)
bestnet <- cbind(pz1[,1],
pz2[,1],
pz3[,1],
pz4[,1],
pz5[,1],
pz6[,1],
pz7[,1],
pz8[,1],
pz9[,1],
pz10[,1])
majnet <- cbind(pz1[,2],
pz2[,2],
pz3[,2],
pz4[,2],
pz5[,2],
pz6[,2],
pz7[,2],
pz8[,2],
pz9[,2],
pz10[,2])
colnames(bestnet) <- colnames(majnet) <- c("lattice",
"max_max_betweenness",
"max_mean_betweenness",
"max_mean_clustering",
"max_var_constraint",
"fully_connected",
"max_max_closeness",
"min_max_closeness",
"min_mean_betweenness",
"min_mean_clustering")
bestnet <- as.data.frame(bestnet)
majnet <- as.data.frame(majnet)
best_ineff <- bestnet %>% select(lattice:max_var_constraint) %>% rowMeans()
best_eff <- bestnet %>% select(fully_connected:min_mean_clustering) %>% rowMeans()
maj_ineff <- majnet %>% select(lattice:max_var_constraint) %>% rowMeans()
maj_eff <- majnet %>% select(fully_connected:min_mean_clustering) %>% rowMeans()
results <- cbind(best_ineff,best_eff,maj_ineff,maj_eff)
#best
ineff_up <- bestnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(lattice:max_var_constraint)  %>% which.max()
ineff_low <- bestnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(lattice:max_var_constraint)  %>% which.min()
eff_up <- bestnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(fully_connected:min_mean_clustering)  %>% which.max()
eff_low <- bestnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(fully_connected:min_mean_clustering)  %>% which.min()
beub <-  bestnet %>% select(fully_connected:min_mean_clustering) %>% select(eff_up)
belb <- bestnet %>% select(fully_connected:min_mean_clustering) %>% select(eff_low)
biub<-  bestnet  %>% select(lattice:max_var_constraint) %>% select(ineff_up)
bilb <- bestnet  %>% select(lattice:max_var_constraint) %>% select(ineff_low)
#majority
ineff_up <- majnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(lattice:max_var_constraint)  %>% which.max()
ineff_low <- majnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(lattice:max_var_constraint)  %>% which.min()
eff_up <- majnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(fully_connected:min_mean_clustering)  %>% which.max()
eff_low <- majnet %>% mutate(x=1:200) %>% filter(x==200) %>% select(fully_connected:min_mean_clustering)  %>% which.min()
meub <-  majnet %>% select(fully_connected:min_mean_clustering) %>% select(eff_up)
melb <- majnet %>% select(fully_connected:min_mean_clustering) %>% select(eff_low)
miub <-  majnet %>% select(lattice:max_var_constraint) %>% select(ineff_up)
milb <-  majnet %>% select(lattice:max_var_constraint) %>% select(ineff_low)
#create plot
melt_df <- melt(results)
melt2 <- cbind(melt_df, as.vector(c(as.numeric(unlist(belb)),
as.numeric(unlist(bilb)),
as.numeric(unlist(melb)),
as.numeric(unlist(milb)))),
as.vector(c(as.numeric(unlist(beub)),
as.numeric(unlist(biub)),
as.numeric(unlist(meub)),
as.numeric(unlist(miub)))))
colnames(melt2) <- c("Time",
"Strategy",
"value",
"LB",
"UB")
p1 <- melt2 %>%
mutate(x=rep(1:200,4),strat=rep(c("Strategy: best member (s=3)",
"Strategy: conformity (s=3)"),each=400 ) )
df1 <- p1[p1$Strategy=="best_eff",]
df2 <- p1[p1$Strategy=="best_ineff",]
df3 <- p1[p1$Strategy=="maj_eff",]
df4 <- p1[p1$Strategy=="maj_ineff",]
p1$Strategy <- rep(rep(c("Inefficient networks","Efficient networks"),2),each=200)
#sds
data <- list.files(pattern="Resultslattice")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd1 <- ls
data <- list.files(pattern="Resultsmax-max-betweenness")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd2 <- ls
data <- list.files(pattern="Resultsmax-mean-betweenness")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd3 <- ls
data <- list.files(pattern="Resultsmax-mean-clustering")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd4 <- ls
data <- list.files(pattern="Resultsmax-var-constraint")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd5 <- ls
data <- list.files(pattern="Resultsfully")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd6 <- ls
data <- list.files(pattern="Resultsmax-max-closeness")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd7 <- ls
data <- list.files(pattern="Resultsmin-max-closeness")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd8 <- ls
data <- list.files(pattern="Resultsmin-mean-betweenness")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd9 <- ls
data <- list.files(pattern="Resultsmin-mean-clustering")
ls <- matrix(0,ncol=2,nrow=length(data))
for (i in 1:length(data)){
load(data[i])
ls[i,] <- res[[1]][200,c(1,3)]
}
sd10 <- ls
sdZ <-  rbind(apply(sd1,2,sd),
apply(sd2,2,sd),
apply(sd3,2,sd),
apply(sd4,2,sd),
apply(sd5,2,sd),
apply(sd6,2,sd),
apply(sd7,2,sd),
apply(sd8,2,sd),
apply(sd9,2,sd),
apply(sd10,2,sd))
avg_best <- bestnet
avg_maj <- majnet
last_best <- avg_best[200,]
last_maj <- avg_maj[200,]
sd_best <- apply(bestnet,2,sd)
sd_maj <- apply(majnet,2,sd)
df <- cbind(as.numeric(last_best),as.numeric(last_maj))
mdf <- melt(df)
mdf <- cbind(mdf,rep(c("Strategy: best member (s=3)","Strategy: conformity (s=3)"),each=10),
rep(c("a","b","a","b"),each=5))
melt_df <- melt(results)
melt2 <- cbind(melt_df, as.vector(c(as.numeric(unlist(belb)),
as.numeric(unlist(bilb)),
as.numeric(unlist(melb)),
as.numeric(unlist(milb)))),
as.vector(c(as.numeric(unlist(beub)),
as.numeric(unlist(biub)),
as.numeric(unlist(meub)),
as.numeric(unlist(miub)))))
